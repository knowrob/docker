{
    "query": [
        {
            "q": "",
            "text": "----- init -----"
        },
        {
            "q": "mng_db('prediction'), load_experiment('/home/ros/knowrob_data/logs/robots/cram/prediction/cram_log.owl'), diagram_canvas.",
            "text": "Load exploration prediction experiment"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the semantic map -----"
        },
        {
            "q": "owl_parse('package://iai_semantic_maps/owl/room.owl'), owl_individual_of(A, knowrob:'SemanticEnvironmentMap'), !, add_object_with_children(A).",
            "text": "Visualize semantic map"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the robot's logged belief state -----"
        },
        {
            "q": "owl_parse('package://knowrob_srdl/owl/PR2.owl').",
            "text": "Load PR2 robot model"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), rdf_has(Task, knowrob:'startTime', T), add_agent_visualization('PR2', pr2:'PR2Robot1', T, '', '').",
            "text": "What was the pose of the robot during perception actions?"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Decision Tree Queries -----"
        },
        {
            "q": "mng_decision_tree(_Desig), findall([_Key,_Value], mng_designator_props('DT', _Desig, _Key, Value_), Designator), designator_publish('DT', _Desig).",
            "text": "Show the decision tree"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Prediction Related Queries -----"
        },
        {
            "q": "findall(_Task, rdf_has(_Task, rdf:type, knowrob:'FindingObjects'), _L), length(_L, Count).",
            "text": "Count instances of object finding tasks"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), not((subtask_all(Task, _SubtaskPerceive), rdf_has(_SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(_SubtaskPerceive, knowrob:'perceptionResult', _Obj)))).",
            "text": "Object finding tasks that failed due to no object being found"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, _SubtaskPerceive), rdf_has(_SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(_SubtaskPerceive, knowrob:'perceptionResult', Obj)).",
            "text": "Object finding tasks that succeeded"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', _Obj)), owl_has(SubtaskPerceive, knowrob:'perceptionRequest', _Desig), mng_designator(_Desig, 'designator.OF._id', _DesigJava), mng_designator_props(_Desig, _DesigJava, ['OF', 'TYPE'], 'PANCAKEMIX').",
            "text": "Trying to find the pancake mix and succeeding"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), not(once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', _Obj))), owl_has(SubtaskPerceive, knowrob:'perceptionRequest', _Desig), mng_designator(_Desig, 'designator.OF._id', _DesigJava), mng_designator_props(_Desig, _DesigJava, ['OF', 'TYPE'], 'COFFEE').",
            "text": "Trying to find the coffee and failing"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Statistics -----"
        },
        {
            "q": "findall([_Type,_Num], ((member(_Type, ['PANCAKEMIX', 'COFFEE']),findall(_Task, (rdf_has(_Task, rdf:type, knowrob:'FindingObjects'), subtask_all(_Task, _PerceiveTask), rdf_has(_PerceiveTask, rdf:type, knowrob:'UIMAPerception'), once(owl_has(_PerceiveTask, knowrob:'perceptionResult', _Obj)), owl_has(_PerceiveTask, knowrob:'perceptionRequest', _Desig), mng_designator(_Desig, 'designator.OF._id', _DesigJava), mng_designator_props(_Desig, _DesigJava, ['OF', 'TYPE'], _Type) ), _Matching), length(_Matching, _Num)) ; ( _Type='NO-OBJECT', findall(_Task, ( rdf_has(_Task, rdf:type, knowrob:'FindingObjects'), not(( subtask_all(_Task, _PerceiveTask), rdf_has(_PerceiveTask, rdf:type, knowrob:'UIMAPerception'), once(owl_has(_PerceiveTask, knowrob:'perceptionResult', _Obj)) )) ), _Matching), length(_Matching, _Num)) ), Distrib), findall(_Type, member([_Type,_], Distrib), Types), findall(_Num, member([_,_Num], Distrib), Nums), add_diagram(errordist, 'Perception tasks', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Show the distribution of object finding tasks"
        },
        {
            "q": "findall(Type-Num, (owl_subclass_of(T, knowrob:'CRAMFailure'),\n rdf_split_url(_, Type, T),findall(F, failure_type(F, T), Failures),\n length(Failures, Num)), Distrib),pairs_keys_values(Distrib, Types, Nums),\n add_diagram(errordist, 'Error distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Show occurences of typical error types in the chart"
        }
    ]
}
