{
    "query": [
        {
            "q": "",
            "text": "----- init -----"
        },
        {
            "q": "mng_db('robohow-rolling'), owl_parse('package://knowrob_srdl/owl/BoxyWithRoller.owl'), rdf_db:rdf_register_ns(boxy, 'http://knowrob.org/kb/BoxyWithRoller.owl#', [keep(true)]),register_ros_package(knowrob_robohow).",
            "text": "Initialize context"
        },
        {
            "q": "load_experiments('/home/ros/knowrob_data/logs/robohow/rolling/', ['rolling1'], 'cram_log.owl').",
            "text": "Load logged experiments"
        },
        {
            "q": "owl_parse('package://iai_semantic_maps/owl/kitchen.owl'), add_object_with_children('http://knowrob.org/kb/IAI-kitchen.owl#IAIKitchenMap_PM580j').",
            "text": "Load semantic map"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the semantic map -----"
        },
        {
            "q": "owl_subclass_of(T, knowrob:'StorageConstruct'), class_properties(T, knowrob:'typePrimaryFunction-StoragePlaceFor', knowrob:'Perishable'), owl_individual_of(Obj, T), highlight_object_with_children(Obj).",
            "text": "What is the storage place for perishable items?"
        },
        {
            "q": "owl_individual_of(Obj, knowrob:'ElectricalDevice'), highlight_object_with_children(Obj).",
            "text": "Which are electrical devices?"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the logged belief state -----"
        },
        {
            "q": "task_goal(Rolling, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), rdf_has(Rolling, knowrob:'startTime', T), add_agent_visualization('BOXY', boxy:'boxy_robot2', T, '', '').",
            "text": "Visualize boxy pre rolling"
        },
        {
            "q": "task_goal(PostAction, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), rdf_has(PostAction, knowrob:'previousAction', PreAction), designator_between(Designator, PreAction, PostAction), rdf_has(PostAction, knowrob:'startTime', T), visualize_rolling_experiment(T) ,get_sherlock_image_perception(PreAction,Perception),once(designator_publish_image(Perception)).",
            "text": "Visualize dough pre rolling"
        },
        {
            "q": "task_goal(Action, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), rdf_has(Action, knowrob:'nextAction', _PostAction),rdf_has(_PostAction, knowrob:'nextAction', PostAction),designator_between(Designator, _PostAction, PostAction), rdf_has(_PostAction, knowrob:'startTime', T), visualize_rolling_experiment(T) ,get_sherlock_image_perception(_PostAction,Perception),once(designator_publish_image(Perception)).",
            "text": "Visualize dough post rolling"
        },
        {
            "q": "task_goal(Action, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), get_reach_action(Action,Reach), get_dynamics_image_perception(Reach,Perc),            once(designator_publish_image(Perc)),show_action_trajectory(Reach).",
            "text": "Show the trajectory for reaching the dough"
        },
        {
            "q": "task_goal(Action, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), get_roll_action(Action,Roll), get_dynamics_image_perception(Roll,Perc), show_action_trajectory(Roll), once(designator_publish_image(Perc)).",
            "text": "Show the trajectory for rolling the dough"
        },
        {
            "q": "task_goal(Action, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'),get_retract_action(Action,Retract), get_dynamics_image_perception(Retract,Perc), once(designator_publish_image(Perc)),            show_action_trajectory(Retract).",
            "text": "Show the trajectory for going going back from rolling"
        },
        {
            "q": "findall(_Size,  (task_goal(_PostAction, 'REPLACEABLE-FUNCTION-ROLL-OBJECT'), rdf_has(_PostAction, knowrob:'previousAction', _PreAction), designator_between(_Designator, _PreAction, _PostAction), get_designator_contour_size(_Designator, ['DOUGH', 'CONTOUR'],_Size))  ,Sizes),!,add_barchart('doughchart_id', 'Dough Size', [[[1,2,3,4,5,6,7,8,9,10,11],Sizes]]).",
            "text": "How did the size of dough changed over time(cm*cm)"
        }
    ]
}
