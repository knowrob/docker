{
    "query": [
        {
            "q": "",
            "text": "----- init -----"
        },
        {
            "q": "register_ros_package(knowrob_saphari).",
            "text": "Initialize SAPHARI context"
        },
        {
            "q": "load_experiments('/home/ros/knowrob_data/logs/saphari/', 'cram_log.owl').",
            "text": "Load logged experiments"
        },
        {
            "q": "owl_parse('package://knowrob_saphari/owl/saphari_map.owl'), add_object_with_children('http://knowrob.org/kb/saphari_map.owl#Map_SAPHARI').",
            "text": "Load semantic map"
        },
        {
            "q": "",
            "text": "----- Queries on controller designators -----"
        },
        {
            "q": "action_designator('REPLACEABLE-FUNCTION-MOVE-DOWN-UNTIL-TOUCH', Timepoint, Designator), mng_designator_props(Designator, 'CONTACT-STRATEGIES.SEVERE-COLLISION', Policy).",
            "text": "What was the collision strategy during the experiment?"
        },
        {
            "q": "findall([Obj2,Timepoint], (action_designator('REPLACEABLE-FUNCTION-MOVE-OVER-OBJECT', Timepoint, Designator), mng_designator_props(Designator, 'ARM', 'RIGHT'), mng_designator_props(Designator, 'OBJECT._ID', Object), atom_concat('http://knowrob.org/kb/cram_log.owl#', Object, Obj2) ), Objects), member([Obj2,Timepoint], Objects), add_object_as_semantic_instance(Obj2, Loc, Timepoint, Instance), add_object_with_children(Instance), designator_publish(Obj2), highlight_object_mesh(Instance).",
            "text": "Over which objects did the robot moved the right arm?"
        },
        {
            "q": "saphari_move_down_events(_Events), findall([_Event,_Collision], (member(_Event,_Events), rdf_has(_Event, knowrob:'startTime', S), rdf_has(_Event, knowrob:'endTime', E), saphari_collision_events(_CType, _CEvents), member(_Collision, _CEvents), rdf_has(_Collision, knowrob:'startTime', _CS), time_between(_CS, S, E), add_trajectory('right_gripper_tool_frame', S, E, 0.3)), Collisions).",
            "text": "Did collisions happened during a MOVE-DOWN-UNTIL-TOUCH action?"
        },
        {
            "q": "saphari_intrusion_events(Events), findall(Collision, (member(Event,Events), rdf_has(Event, knowrob:'startTime', S), rdf_has(Event, knowrob:'endTime', E), saphari_collision_events(CType, CEvents), member(Collision, CEvents), rdf_has(Collision, knowrob:'startTime', CS), time_between(CS, S, E)), Collisions), not(Collisions = []).",
            "text": "Did collisions happened during a HUMAN-INTRUSION event?"
        },
        {
            "q": "findall(Type-Num, (saphari_collision_events(Type, Events), length(Events, Num)), Distrib), pairs_keys_values(Distrib, Types, Nums), add_diagram(errordist, 'Collision distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Display the collision types which occurred during the experiment in a pie chart!"
        },
        {
            "q": "findall(Type-Num, ( saphari_action_events(Type, Events), findall(E, ( member(E, Events), owl_individual_of(I, saphari:'HumanIntrusion'), rdf_has(E, knowrob:'startTime', T0), rdf_has(E, knowrob:'endTime', T1), rdf_has(I, knowrob:'startTime', T), time_between(T, T0, T1) ), MatchingEvents), length(MatchingEvents, Num) ), Distrib), pairs_keys_values(Distrib, Types, Nums), add_diagram(errordist, 'Action distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Display the action types during which an human intrusion occurred in a pie chart"
        },
        {
            "q": "Ranges = [[0.0,3.0,'0-3s'], [3.0,6.0,'3-6s'], [6.0,9999.0,'>6s']], findall(Key-Num, ( member([Low,High,Key], Ranges), findall(I, ( owl_individual_of(I, saphari:'HumanIntrusion'), rdf_has(I, knowrob:'startTime', _S), rdf_has(I, knowrob:'endTime', _E), time_term(_S, _STime), time_term(_E, _ETime), Duration is _ETime - _STime, Duration >= Low, High >= Duration ), Matching), length(Matching, Num)), Distrib), pairs_keys_values(Distrib, Types, Nums), add_diagram(errordist, 'Intrusion distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Display the human intrusion as a function of their length in a pie chart"
        },
        {
            "q": "mng_designator_distinct_values('designator.USER-ID', _IdList), findall(Id-Num, ( member(NumJava, _IdList), jpl_call(NumJava, 'intValue', [], Id), term_to_atom(Id,IdAtom), findall(Designator, ( owl_individual_of(Intr, saphari:'HumanIntrusion'), rdf_has(Intr, knowrob:'designator', Designator), mng_designator_props(Designator, 'USER-ID', IdAtom) ), Designators), length(Designators, Num)), Distrib), pairs_keys_values(Distrib, Types, Nums), add_diagram(errordist, 'Intrusion distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Display the human intrusion distribution in a pie chart"
        },
        {
            "q": "",
            "text": "----- Queries on the robot's logged belief state -----"
        },
        {
            "q": "findall([_Obj,_Time], (owl_individual_of(_Perception, knowrob:'UIMAPerception'), owl_has(_Perception, knowrob:'perceptionResult', _Obj), owl_has(_Perception, knowrob:'endTime', _Time)), _Objs), member([Obj,Time], _Objs), add_object_as_semantic_instance(Obj, Loc, Time, Instance), add_object_with_children(Instance), designator_publish(Obj).",
            "text": "Which objects were perceived during the experiment?"
        },
        {
            "q": "owl_individual_of(_I, saphari:'HumanIntrusion'), owl_has(_I, knowrob:'startTime', T), owl_has(_I, knowrob:'designator', _D), mng_designator_props(_D, 'TF-PREFIX', _Prefix), intrusion_link(openni_human:'iai_human_robot1', _Prefix, T, BodyPart).",
            "text": "Which body parts of the human intersected the safety area at first?"
        },
        {
            "q": "owl_individual_of(I, saphari:'HumanIntrusion'), owl_has(I, knowrob:'startTime', T), saphari_visualize_experiment(T).",
            "text": "How did the scene looked like when intrusion events occurred?"
        },
        {
            "q": "owl_individual_of(I, saphari:'HumanIntrusion'), owl_has(I, knowrob:'startTime', T0), owl_has(I, knowrob:'endTime', T1), saphari_visualize_experiment(T0), owl_has(I, knowrob:'designator', D), mng_designator_props(D, 'TF-PREFIX', Prefix), atom_concat(Prefix, 'lefthand', Frame), clear_trajectories, add_trajectory(Frame, T0, T1, 0.1).",
            "text": "Show left hand trajectories during intrusion events."
        },
        {
            "q": "owl_individual_of(A,knowrob:'Scalpel'), highlight_object_mesh(A).",
            "text": "What was the position of the scalpel during the Experiment?"
        },
        {
            "q": "owl_individual_of(A,knowrob:'Scalpel'),owl_has(A,knowrob:'dangerousPart',S), remove_mesh_highlight(A), highlight_object_mesh(S).",
            "text": "What are the dangerous parts of the Scalpel?"
        }
    ]
}
