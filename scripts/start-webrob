#!/bin/bash


if [ -z "$KNOWROB_WEB_PORT" ]
then
   export KNOWROB_WEB_PORT=5000
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if knowrob_data container exists and create otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" knowrob_data 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No knowrob_data container exists, creating a new one..."
  docker run --name knowrob_data knowrob/knowrob_data:latest true
fi


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if user_data container exists and create otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" user_data 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No user_data container exists, creating a new one..."
  docker run --name user_data knowrob/user_data true
fi



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if mongo_data container exists and create otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" mongo_data 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No mongo_data container exists, creating a new one..."
  docker run -d -v /data/db --name mongo_data busybox true
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if mongo_db is running or stopped and start otherwise

RUNNING=$(docker inspect --format="{{ .State.Running }}" mongo_db 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No MongoDB container exists, creating a new one..."
  docker run -d -p 27017:27017 --volumes-from mongo_data --name mongo_db mongo
fi

if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
  echo "MongoDB container exists, starting it..."
  docker start mongo_db
fi



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if nginx-proxy is running or stopped and start otherwise

RUNNING=$(docker inspect --format="{{ .State.Running }}" nginx-proxy 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No nginx-proxy container exists, creating a new one..."
  docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock --name nginx-proxy -t knowrob/nginx-proxy
fi

if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
  echo "nginx-proxy container exists, starting it..."
  docker start nginx-proxy
fi


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if user_db container exists and create otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" user_db 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No user DB container exists, creating a new one..."
  docker run -d -v /var/lib/postgresql/data --name user_db knowrob/user_db true
fi


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if postgres_db is running or stopped and start otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" postgres_db 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No Postgres container exists, creating a new one..."
  docker run -d -e "POSTGRES_USER=docker" --volumes-from user_db --name postgres_db knowrob/postgres
fi

if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
  echo "Postgres container exists, starting it..."
  docker start postgres_db
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if dockerbridge is running or stopped and start otherwise
RUNNING=$(docker inspect --format="{{ .State.Running }}" dockerbridge 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No dockerbridge container exists, creating a new one..."
  docker run -d -v /var/run/docker.sock:/var/run/docker.sock --name dockerbridge knowrob/dockerbridge
fi

if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
  echo "Dockerbridge container exists, starting it..."
  docker start dockerbridge
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# start a knowrob container for the tutorials
RUNNING=$(docker inspect --format="{{ .State.Running }}" tutorials 2>/dev/null)

if [ $? -eq 1 ]; then # container does not exist
  echo "No tutorials container exists, creating a new one..."
  docker run -e VIRTUAL_HOST=tutorials -e VIRTUAL_PORT=9090 --volumes-from knowrob_data --link mongo_db:mongo --name tutorials -d knowrob/hydro-knowrob-daemon
fi

if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
  echo "tutorials container exists, starting it..."
  docker start tutorials
fi

# Wait for the postgres port to be available
echo "Waiting for postgres container..."
until nc -z $(docker inspect --format='{{.NetworkSettings.IPAddress}}' postgres_db) 5432
do
    sleep 1
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# start webrob container
RUNNING=$(docker inspect --format="{{ .State.Running }}" webrob 2>/dev/null)

if [ "$RUNNING" == 'true' ]; then # container exists, and is running
  echo "Web app container is running, stopping and removing it..."
  docker stop webrob && docker rm webrob
elif [ "$RUNNING" == 'false' ]; then # container exist
  echo "Web app container exists, removing it..."
  docker rm webrob
fi

echo "Creating web app container..."
docker run --rm -i -p $KNOWROB_WEB_PORT:5000 --volumes-from knowrob_data --volumes-from user_data --link postgres_db:postgres --link dockerbridge:dockerbridge -e VIRTUAL_HOST=webrob -e VIRTUAL_PORT=5000 --name webrob knowrob/webrob python runserver.py
