#!/bin/bash

bool=true
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# runContainer - Creates docker containers if not existing
#   arg1: <container_name> - String, Name of the container
#   arg2: <docker_run_parameters> - String, Docker run parameters, excluding --name parameter
#   arg3: (start_if_not_running) - Boolean, true if container should be started
function runContainer {
  RUNNING=$(docker inspect --format="{{ .State.Running }}" $1 2>/dev/null)
  if [ $? -eq 1 ] || [ "$RUNNING" == '<no value>' ]; then # container does not exist
    echo "No $1 container exists, creating a new one..."
    docker run --name $1 $2
  fi
  if [ "$3" == true ] && [ "$RUNNING" == 'false' ]; then # container exists, but stopped
    echo "$1 container exists, starting it..."
    docker start $1
  fi
}

function stopContainer {
  RUNNING=$(docker inspect --format="{{ .State.Running }}" $1 2>/dev/null)
  if [ "$RUNNING" == 'true' ]; then # container does not exist
    docker rm -f $1
  fi
  if [ "$RUNNING" == 'false' ]; then # container exists, but stopped
    docker rm -f $1
  fi
}

if [ -z "$KNOWROB_WEB_PORT" ]
then
   export KNOWROB_WEB_PORT=5000
fi

stopContainer "knowrob"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if knowrob_data container exists and create otherwise
runContainer "knowrob_data" "knowrob/knowrob_data:latest true"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if user_data container exists and create otherwise
runContainer "user_data" "knowrob/user_data true"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if mesh_data container exists and create otherwise
runContainer "mesh_data" "-v /home/ros/mesh_data ubuntu chmod -R ugo+rw /home/ros/mesh_data"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if mongo_data container exists and create otherwise
runContainer "mongo_data" "-v /data/db busybox true"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if mongo_db is running or stopped and start otherwise
runContainer "mongo_db" "-d --volumes-from mongo_data mongo" true

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if nginx is running or stopped and start otherwise
runContainer "nginx" "-d -p 80:80 -p 443:443 -v /etc/nginx -v $DIR/../nginx-proxy/certs:/etc/nginx/certs -t nginx" true

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if docker-gen is running or stopped and start otherwise
runContainer "docker-gen" "-d --volumes-from nginx \
	-v /var/run/docker.sock:/tmp/docker.sock \
	-v $DIR/../nginx-proxy:/etc/docker-gen/templates \
	-t jwilder/docker-gen -notify-sighup nginx -watch -only-published /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf" true

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if user_db container exists and create otherwise
runContainer "user_db" "-v /var/lib/postgresql/data knowrob/user_db true"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if postgres_db is running or stopped and start otherwise
runContainer "postgres_db" "-d -e POSTGRES_USER=docker --volumes-from user_db knowrob/postgres" true

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Check if dockerbridge is running or stopped and start otherwise
runContainer "dockerbridge" "-d -v /var/run/docker.sock:/var/run/docker.sock knowrob/dockerbridge" true

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# start a knowrob container for the tutorials
runContainer "tutorials" "-d -e VIRTUAL_HOST=tutorials -e VIRTUAL_PORT=9090 --volumes-from knowrob_data --link mongo_db:mongo knowrob/hydro-knowrob-daemon" true

# Wait for the postgres port to be available
echo "Waiting for postgres container..."
until nc -z $(docker inspect --format='{{.NetworkSettings.IPAddress}}' postgres_db) 5432
do
    sleep 1
done

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# start webrob container
RUNNING=$(docker inspect --format="{{ .State.Running }}" login 2>/dev/null)

if [ "$RUNNING" == 'true' ]; then # container exists, and is running
  echo "Web app container is running, stopping and removing it..."
  docker stop login && docker rm login
elif [ "$RUNNING" == 'false' ]; then # container exist
  echo "Web app container exists, removing it..."
  docker rm login
fi

echo "Creating web app container..."
docker run --rm -i -p 127.0.0.1:$KNOWROB_WEB_PORT:5000 \
    --volumes-from user_data \
    --volumes-from mesh_data \
    --link postgres_db:postgres \
    --link dockerbridge:dockerbridge \
    -e VIRTUAL_HOST=login \
    -e VIRTUAL_PORT=5000 \
    --name login \
    openease/login python runserver.py
